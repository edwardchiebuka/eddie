---
title: "Cycling Company"
author: "Edward Chiebuka"
date: "2/19/2022"
output:
  word_document: default
  html_document: default
  pdf_document: default
---

# COLLECTING CLEANING ANALYZING AND VISUALIZING CYCLING COMPANY DATA

import packages and set working directory to simplify calls to data 

```{r load packages}
library(tidyverse)  #helps wrangle data
library(lubridate)  #helps wrangle date attributes
library(ggplot2)  #helps visualize data
getwd() #displays your working directory
setwd("/Users/Edward/Documents/Google Data Analytics Course/Case Studies/Cycling/data/csv files")
```

## STEP 1: COLLECT DATA

```{r read data from csv files}
jan_2021 <- read_csv("202101-divvy-tripdata.csv")
feb_2021 <- read_csv("202102-divvy-tripdata.csv")
mar_2021 <- read_csv("202103-divvy-tripdata.csv")
apr_2021 <- read_csv("202104-divvy-tripdata.csv")
may_2021 <- read_csv("202105-divvy-tripdata.csv")
jun_2021 <- read_csv("202106-divvy-tripdata.csv")
jul_2021 <- read_csv("202107-divvy-tripdata.csv")
aug_2021 <- read_csv("202108-divvy-tripdata.csv")
sep_2021 <- read_csv("202109-divvy-tripdata.csv")
oct_2021 <- read_csv("202110-divvy-tripdata.csv")
nov_2021 <- read_csv("202111-divvy-tripdata.csv")
dec_2021 <- read_csv("202112-divvy-tripdata.csv")
```

## STEP 2: WRANGLE DATA AND COMBINE INTO A SINGLE FILE

Convert ride_id and rideable_type to character so that they can stack correctly

```{r convert data types}
jan_2021 <-  mutate(jan_2021, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type))

feb_2021 <-  mutate(feb_2021, ride_id = as.character(ride_id)
                    ,rideable_type = as.character(rideable_type))

mar_2021 <-  mutate(mar_2021, ride_id = as.character(ride_id)
                    ,rideable_type = as.character(rideable_type))

apr_2021 <-  mutate(apr_2021, ride_id = as.character(ride_id)
                    ,rideable_type = as.character(rideable_type))

may_2021 <-  mutate(may_2021, ride_id = as.character(ride_id)
                    ,rideable_type = as.character(rideable_type))

jun_2021 <-  mutate(jun_2021, ride_id = as.character(ride_id)
                    ,rideable_type = as.character(rideable_type))

jul_2021 <-  mutate(jul_2021, ride_id = as.character(ride_id)
                    ,rideable_type = as.character(rideable_type))

aug_2021 <-  mutate(aug_2021, ride_id = as.character(ride_id)
                    ,rideable_type = as.character(rideable_type))

sep_2021 <-  mutate(sep_2021, ride_id = as.character(ride_id)
                    ,rideable_type = as.character(rideable_type))

oct_2021 <-  mutate(oct_2021, ride_id = as.character(ride_id)
                    ,rideable_type = as.character(rideable_type))

nov_2021 <-  mutate(nov_2021, ride_id = as.character(ride_id)
                    ,rideable_type = as.character(rideable_type))

dec_2021 <-  mutate(dec_2021, ride_id = as.character(ride_id)
                    ,rideable_type = as.character(rideable_type))

```

Stack individual quarter's data frames into one big data frame

```{r combine all csv files}
all_trips <- bind_rows(jan_2021,feb_2021,mar_2021,apr_2021,may_2021,jun_2021,jul_2021,aug_2021,sep_2021,oct_2021,nov_2021,dec_2021)
```

Remove lat, long, birthyear

```{r remove unwanted columns}
all_trips <- all_trips %>%
  select(-c(start_lat, start_lng, end_lat, end_lng,))

```

## STEP 3: CLEAN UP AND ADD DATA TO PREPARE FOR ANALYSIS

Reassign member_values and check that it was reassigned to the desired values

```{r reassign memberships values}
all_trips <-  all_trips %>%
mutate(member_casual = recode(member_casual
                              ,"Subscriber" = "member"
                              ,"Customer" = "casual"))
table(all_trips$member_casual)
```

Add columns that list the date, month, day, and year of each ride
This will allow us to aggregate ride data for each month, day, or year

```{r add columns for day month and year}
all_trips$date <- as.Date(all_trips$started_at) #The default format is yyyy-mm-dd
all_trips$month <- format(as.Date(all_trips$date), "%m")
all_trips$day <- format(as.Date(all_trips$date), "%d")
all_trips$year <- format(as.Date(all_trips$date), "%Y")
all_trips$day_of_week <- format(as.Date(all_trips$date), "%A")
```

Add a "ride_length" calculation to all_trips (in seconds)

```{r add ride length column}
all_trips$ride_length <- difftime(all_trips$ended_at,all_trips$started_at)
```

Convert "ride_length" from Factor to numeric so we can run calculations on the data

```{r change ride length data type}
is.factor(all_trips$ride_length)
all_trips$ride_length <- as.numeric(as.character(all_trips$ride_length))
is.numeric(all_trips$ride_length)
```

Remove "bad" data
The dataframe includes a few hundred entries when bikes were taken out of docks and checked for quality by Divvy or ride_length was negative

```{r remove bad data}
all_trips_v2 <- all_trips[!(all_trips$start_station_name == "HQ QR" | all_trips$ride_length<0),]
```

# STEP 4: CONDUCT DESCRIPTIVE ANALYSIS

Compare members and casual users

```{r compare members ride length}
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = mean)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = median)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = max)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = min)
```

See the average ride time by each day for members vs casual users

```{r average ride length by users}
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week,
          FUN = mean)
```

analyze ridership data by type and weekday

```{r analyze riders by weekday}
all_trips_v2 %>%
  mutate(weekday = wday(started_at, label = TRUE)) %>%  #creates weekday field using wday()
  drop_na() %>% 
group_by(member_casual, weekday) %>%  #groups by usertype and weekday
  summarise(number_of_rides = n()     #calculates the number of rides and average duration
            ,average_duration = mean(ride_length)) %>%
  # calculates the average duration
  arrange(member_casual, weekday)
# sorts
```

## STEP 5 VISUALIZE THE DATA

visualize the number of rides by rider type

```{r viz no of rides by riders}
require(ggplot2)
require(scales)

all_trips_v2 %>%
  mutate(weekday = wday(started_at, label = TRUE)) %>%
  group_by(member_casual, weekday) %>%
  drop_na() %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>%
  arrange(member_casual, weekday)  %>%
  ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
  geom_col(position = "dodge")+
  labs(title = "Average Rides", subtitle = "Average Number of Rides per Weekday for 2021")+
  xlab("weekday")+
  ylab("number of rides") + scale_y_continuous(labels = comma)
```

visualization for average duration

```{r viz average duration per rider}
all_trips_v2 %>%
  mutate(weekday = wday(started_at, label = TRUE)) %>%
  group_by(member_casual, weekday) %>%
  drop_na() %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)/60) %>%
  arrange(member_casual, weekday)  %>%
  ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
  geom_col(position = "dodge")+
  labs(title = "Average Rides", subtitle = "Average Duration of Rides per Weekday for 2021")+
  xlab("weekday")+
  ylab("average duration (min)")
```


visualization for average duration per month

```{r viz average duration per month }
all_trips_v2 %>%
  group_by(member_casual, month) %>%
  drop_na() %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)/60) %>%
  arrange(member_casual, month)  %>%
  ggplot(aes(x = month, y = average_duration, fill = member_casual)) +
  geom_col(position = "dodge")+
  labs(title = "Average Rides", subtitle = "Average Duration of Rides per month for 2021")+
  xlab("month")+
  ylab("average duration (min)")
```

## STEP 6: EXPORT SUMMARY FILE FOR FURTHER ANALYSIS

Create a csv file that we will visualize in Excel or Tableau

```{r export summary}
counts <- aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual +
                        all_trips_v2$day_of_week, FUN = mean)
write.csv(counts, file = '/Users/Edward/Documents/Google Data Analytics Course/Case Studies/Cycling/data/avg_ride_length.csv')
```
